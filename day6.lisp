(in-package #:aoc2022)

(defun uniqp (buffer)
  (let ((temp (make-hash-table :test 'equal)))
    (loop :for char :across buffer
	  :do (if (gethash char temp)
		  (return-from uniqp NIL)
		  (setf (gethash char temp) char)))
    T))

(defun day6_1 (filename)
  (let ((buffer (make-array 4))
	(counter 0))
    (labels ((buffer-shift (char)
	       (shiftf (aref buffer 0)
		       (aref buffer 1)
		       (aref buffer 2)
		       (aref buffer 3)
		       char)))
      (with-open-file (stream filename)
	(loop :for char = (read-char stream)
	      :while char
	      :do (progn
		    (incf counter)
		    (buffer-shift char)
		    (if (uniqp buffer)
			(return-from day6_1 counter))))))))

(defun day6_2 (filename)
  (let ((buffer (make-array 14))
	(counter 0))
    (labels ((buffer-shift (char)
	       (shiftf (aref buffer 0)
		       (aref buffer 1)
		       (aref buffer 2)
		       (aref buffer 3)
		       (aref buffer 4)
		       (aref buffer 5)
		       (aref buffer 6)
		       (aref buffer 7)
		       (aref buffer 8)
		       (aref buffer 9)
		       (aref buffer 10)
		       (aref buffer 11)
		       (aref buffer 12)
		       (aref buffer 13)
		       char)))
      (with-open-file (stream filename)
	(loop :for char = (read-char stream)
	      :while char
	      :do (progn
		    (incf counter)
		    (buffer-shift char)
		    (if (uniqp buffer)
			(return-from day6_2 counter))))))))
